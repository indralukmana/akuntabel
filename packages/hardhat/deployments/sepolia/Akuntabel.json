{
  "address": "0x8925869e0d0fF478c516cC662F2217cfAC2d8e5d",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "goalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "goalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "judge",
          "type": "address"
        }
      ],
      "name": "GoalApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "goalId",
          "type": "uint256"
        }
      ],
      "name": "GoalCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "goalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        }
      ],
      "name": "GoalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "goalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "judge",
          "type": "address"
        }
      ],
      "name": "JudgeInvited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "goalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "milestoneIndex",
          "type": "uint256"
        }
      ],
      "name": "MilestoneAchieved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "goalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "milestoneIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "MilestoneAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "goalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requiredApprovals",
          "type": "uint256"
        }
      ],
      "name": "RequiredApprovalsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_milestoneIndex",
          "type": "uint256"
        }
      ],
      "name": "achieveMilestone",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goalId",
          "type": "uint256"
        }
      ],
      "name": "approveGoal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "_judges",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "_milestoneDescriptions",
          "type": "string[]"
        },
        {
          "internalType": "uint8",
          "name": "_requiredApprovals",
          "type": "uint8"
        }
      ],
      "name": "createGoal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goalId",
          "type": "uint256"
        }
      ],
      "name": "getGoalDetails",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "judges",
          "type": "address[]"
        },
        {
          "internalType": "uint8",
          "name": "requiredApprovals",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "currentApprovals",
          "type": "uint8"
        },
        {
          "internalType": "bool[]",
          "name": "verifiedApprovals",
          "type": "bool[]"
        },
        {
          "internalType": "string[]",
          "name": "milestoneDescriptions",
          "type": "string[]"
        },
        {
          "internalType": "bool[]",
          "name": "milestoneAchieved",
          "type": "bool[]"
        },
        {
          "internalType": "bool",
          "name": "completed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "fundsReleased",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "goalNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "goals",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "requiredApprovals",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "currentApprovals",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "completed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "fundsReleased",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8ea05eb1788898eeb476dd1efbf5574f25aec106a29d56cd8d9b1b7e8ff8f080",
  "receipt": {
    "to": null,
    "from": "0x80Ad2861Ab5D4EeA61330A4bd7d6969357C463C3",
    "contractAddress": "0x8925869e0d0fF478c516cC662F2217cfAC2d8e5d",
    "transactionIndex": 40,
    "gasUsed": "1867110",
    "logsBloom": "0x
    "blockHash": "0xf6342307e6cd206db1f051070ed939a1acabd8e9d5bd1072c2215f9b4895488f",
    "transactionHash": "0x8ea05eb1788898eeb476dd1efbf5574f25aec106a29d56cd8d9b1b7e8ff8f080",
    "logs": [
      {
        "transactionIndex": 40,
        "blockNumber": 6763445,
        "transactionHash": "0x8ea05eb1788898eeb476dd1efbf5574f25aec106a29d56cd8d9b1b7e8ff8f080",
        "address": "0x8925869e0d0fF478c516cC662F2217cfAC2d8e5d",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000080ad2861ab5d4eea61330a4bd7d6969357c463c3",
          "0x00000000000000000000000080ad2861ab5d4eea61330a4bd7d6969357c463c3"
        ],
        "data": "0x",
        "logIndex": 56,
        "blockHash": "0xf6342307e6cd206db1f051070ed939a1acabd8e9d5bd1072c2215f9b4895488f"
      }
    ],
    "blockNumber": 6763445,
    "cumulativeGasUsed": "11760874",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "25f6c65b8192333dcaa4a1139521603d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"goalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"goalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"judge\",\"type\":\"address\"}],\"name\":\"GoalApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"goalId\",\"type\":\"uint256\"}],\"name\":\"GoalCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"goalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"GoalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"goalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"judge\",\"type\":\"address\"}],\"name\":\"JudgeInvited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"goalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"milestoneIndex\",\"type\":\"uint256\"}],\"name\":\"MilestoneAchieved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"goalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"milestoneIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"MilestoneAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"goalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredApprovals\",\"type\":\"uint256\"}],\"name\":\"RequiredApprovalsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_milestoneIndex\",\"type\":\"uint256\"}],\"name\":\"achieveMilestone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goalId\",\"type\":\"uint256\"}],\"name\":\"approveGoal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_judges\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_milestoneDescriptions\",\"type\":\"string[]\"},{\"internalType\":\"uint8\",\"name\":\"_requiredApprovals\",\"type\":\"uint8\"}],\"name\":\"createGoal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goalId\",\"type\":\"uint256\"}],\"name\":\"getGoalDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"judges\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"requiredApprovals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"currentApprovals\",\"type\":\"uint8\"},{\"internalType\":\"bool[]\",\"name\":\"verifiedApprovals\",\"type\":\"bool[]\"},{\"internalType\":\"string[]\",\"name\":\"milestoneDescriptions\",\"type\":\"string[]\"},{\"internalType\":\"bool[]\",\"name\":\"milestoneAchieved\",\"type\":\"bool[]\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"fundsReleased\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"goalNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"goals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"requiredApprovals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"currentApprovals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"fundsReleased\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A decentralized accountability contract for setting and achieving personal goals with milestones\",\"kind\":\"dev\",\"methods\":{\"createGoal(string,address[],string[],uint8)\":{\"details\":\"Creates a new goal with the specified description, judges, and milestones.\",\"params\":{\"_description\":\"The description of the goal.\",\"_judges\":\"The addresses of the judges.\",\"_milestoneDescriptions\":\"The descriptions of the milestones.\",\"_requiredApprovals\":\"The number of approvals required.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"Akuntabel\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Akuntabel.sol\":\"Akuntabel\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Akuntabel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @title Akuntabel\\n * @dev A decentralized accountability contract for setting and achieving personal goals with milestones\\n */\\ncontract Akuntabel is ReentrancyGuard, AccessControl {\\n    /**\\n     * Goal struct to store the user, description, stake, \\n     * judges, judge approvals, completion, and funds release of a goal.\\n     * judges is assumed to be less than 256 judges, judge array of 256 is used as an impossible value to indicate that the judge has not approved\\n     */\\n    struct Goal {\\n        address user;\\n        string description;\\n        uint256 stake;\\n        address[] judges;\\n        uint8 requiredApprovals;\\n        uint8 currentApprovals;\\n        bool[] verifiedApprovals;\\n        string[] milestoneDescriptions;\\n        bool[] milestoneAchieved;\\n        bool completed;\\n        bool fundsReleased;\\n    }\\n\\n    mapping(uint256 => Goal) public goals;\\n    mapping(address => uint256) public goalNonce;\\n\\n    event GoalCreated(uint256 indexed goalId, address indexed user, string description, uint256 stake);\\n    event MilestoneAdded(uint256 indexed goalId, uint256 milestoneIndex, string description);\\n    event MilestoneAchieved(uint256 indexed goalId, uint256 milestoneIndex);\\n    event JudgeInvited(uint256 indexed goalId, address indexed judge);\\n    event GoalApproved(uint256 indexed goalId, address indexed judge);\\n    event GoalCompleted(uint256 indexed goalId);\\n    event FundsReleased(uint256 indexed goalId, address indexed user, uint256 amount);\\n    event RequiredApprovalsSet(uint256 indexed goalId, uint256 requiredApprovals);\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Creates a new goal with the specified description, judges, and milestones.\\n     * @param _description The description of the goal.\\n     * @param _judges The addresses of the judges.\\n     * @param _milestoneDescriptions The descriptions of the milestones.\\n     * @param _requiredApprovals The number of approvals required.\\n     */\\n    function createGoal(\\n        string memory _description,\\n        address[] memory _judges,\\n        string[] memory _milestoneDescriptions,\\n        uint8 _requiredApprovals\\n    ) external payable nonReentrant {\\n        require(msg.value > 0, \\\"Stake must be greater than 0\\\");\\n        require(_judges.length > 0, \\\"At least one judge is required\\\");\\n        require(_judges.length < 256, \\\"Too many judges\\\");\\n        require(_milestoneDescriptions.length > 0, \\\"At least one milestone is required\\\");\\n        require(_requiredApprovals > 0 && _requiredApprovals <= _judges.length, \\\"Invalid number of required approvals\\\");\\n\\n        uint256 goalId = goalNonce[msg.sender]++;\\n        Goal storage newGoal = goals[goalId];\\n        newGoal.user = msg.sender;\\n        newGoal.description = _description;\\n        newGoal.stake = msg.value;\\n        newGoal.judges = _judges;\\n        newGoal.requiredApprovals = _requiredApprovals;\\n\\n        for (uint256 i = 0; i < _judges.length; i++) {\\n            newGoal.verifiedApprovals.push(false);\\n            emit JudgeInvited(goalId, _judges[i]);\\n        }\\n\\n        for (uint256 i = 0; i < _milestoneDescriptions.length; i++) {\\n            newGoal.milestoneDescriptions.push(_milestoneDescriptions[i]);\\n            newGoal.milestoneAchieved.push(false);\\n            emit MilestoneAdded(goalId, i, _milestoneDescriptions[i]);\\n        }\\n\\n        emit GoalCreated(goalId, msg.sender, _description, msg.value);\\n        emit RequiredApprovalsSet(goalId, _requiredApprovals);\\n    }\\n\\n    function achieveMilestone(uint256 _goalId, uint256 _milestoneIndex) external {\\n        Goal storage goal = goals[_goalId];\\n        require(msg.sender == goal.user, \\\"Only goal creator can achieve milestones\\\");\\n        require(_milestoneIndex < goal.milestoneAchieved.length, \\\"Invalid milestone index\\\");\\n        require(!goal.milestoneAchieved[_milestoneIndex], \\\"Milestone already achieved\\\");\\n\\n        goal.milestoneAchieved[_milestoneIndex] = true;\\n        emit MilestoneAchieved(_goalId, _milestoneIndex);\\n\\n        if (areAllMilestonesAchieved(_goalId)) {\\n            goal.completed = true;\\n            emit GoalCompleted(_goalId);\\n        }\\n    }\\n\\n    function approveGoal(uint256 _goalId) external nonReentrant {\\n        Goal storage goal = goals[_goalId];\\n        uint256 judgeIndex = findJudgeIndex(_goalId, msg.sender);\\n\\n        require(judgeIndex < 256, \\\"Judge not found\\\");\\n\\n        require(goal.completed, \\\"All milestones must be achieved before approval\\\");\\n        require(!goal.fundsReleased, \\\"Funds already released\\\");\\n        require(!goal.verifiedApprovals[judgeIndex], \\\"Judge has already approved\\\");\\n\\n        goal.verifiedApprovals[judgeIndex] = true;\\n        goal.currentApprovals++;\\n        emit GoalApproved(_goalId, msg.sender);\\n\\n        if (goal.currentApprovals == goal.requiredApprovals) {\\n            releaseFunds(_goalId);\\n        }\\n    }\\n\\n    function findJudgeIndex(uint256 _goalId, address _judge) internal view returns (uint256) {\\n        Goal storage goal = goals[_goalId];\\n        for (uint256 i = 0; i < goal.judges.length; i++) {\\n            if (goal.judges[i] == _judge) {\\n                return i;\\n            }\\n        }\\n\\n        return 256;\\n    }\\n\\n  \\n\\n    function areAllMilestonesAchieved(uint256 _goalId) internal view returns (bool) {\\n        Goal storage goal = goals[_goalId];\\n        for (uint256 i = 0; i < goal.milestoneAchieved.length; i++) {\\n            if (!goal.milestoneAchieved[i]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function releaseFunds(uint256 _goalId) internal {\\n        Goal storage goal = goals[_goalId];\\n        require(goal.completed, \\\"Goal not completed\\\");\\n        require(!goal.fundsReleased, \\\"Funds already released\\\");\\n\\n        goal.fundsReleased = true;\\n        emit FundsReleased(_goalId, goal.user, goal.stake);\\n        payable(goal.user).transfer(goal.stake);\\n    }\\n\\n    function withdrawFunds(uint256 _amount) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_amount <= address(this).balance, \\\"Insufficient contract balance\\\");\\n        payable(msg.sender).transfer(_amount);\\n    }\\n\\n    function getGoalDetails(uint256 _goalId) external view returns (\\n        address user,\\n        string memory description,\\n        uint256 stake,\\n        address[] memory judges,\\n        uint8 requiredApprovals,\\n        uint8 currentApprovals,\\n        bool[] memory verifiedApprovals,\\n        string[] memory milestoneDescriptions,\\n        bool[] memory milestoneAchieved,\\n        bool completed,\\n        bool fundsReleased\\n    ) {\\n        Goal storage goal = goals[_goalId];\\n        return (\\n            goal.user,\\n            goal.description,\\n            goal.stake,\\n            goal.judges,\\n            goal.requiredApprovals,\\n            goal.currentApprovals,\\n            goal.verifiedApprovals,\\n            goal.milestoneDescriptions,\\n            goal.milestoneAchieved,\\n            goal.completed,\\n            goal.fundsReleased\\n        );\\n    }\\n}\",\"keccak256\":\"0x577ed02c52c9d128e5a143f544a0e3dbcc9b19c3b2df7f13400ec4c51536496a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c806361449ca21161007f578063a217fddf11610059578063a217fddf1461028f578063a61e9084146102a4578063bc143c96146102b7578063d547741f146102d757600080fd5b806361449ca21461020557806371444dd01461023857806391d148541461026f57600080fd5b8063248a9ca3116100bb578063248a9ca3146101745780632f2ff15d146101a557806336568abe146101c5578063540bdbd2146101e557600080fd5b806301ffc9a7146100e2578063155dd5ee146101175780632049b87314610139575b600080fd5b3480156100ee57600080fd5b506101026100fd3660046117a9565b6102f7565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b506101376101323660046117d3565b61032e565b005b34801561014557600080fd5b50610166610154366004611808565b60036020526000908152604090205481565b60405190815260200161010e565b34801561018057600080fd5b5061016661018f3660046117d3565b6000908152600160208190526040909120015490565b3480156101b157600080fd5b506101376101c0366004611823565b6103c0565b3480156101d157600080fd5b506101376101e0366004611823565b6103e6565b3480156101f157600080fd5b5061013761020036600461184f565b610464565b34801561021157600080fd5b506102256102203660046117d3565b610678565b60405161010e97969594939291906118c1565b34801561024457600080fd5b506102586102533660046117d3565b61074f565b60405161010e9b9a999897969594939291906119a9565b34801561027b57600080fd5b5061010261028a366004611823565b610a8b565b34801561029b57600080fd5b50610166600081565b6101376102b2366004611c09565b610ab6565b3480156102c357600080fd5b506101376102d23660046117d3565b610f03565b3480156102e357600080fd5b506101376102f2366004611823565b611189565b60006001600160e01b03198216637965db0b60e01b148061032857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610339816111af565b4782111561038e5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e636500000060448201526064015b60405180910390fd5b604051339083156108fc029084906000818181858888f193505050501580156103bb573d6000803e3d6000fd5b505050565b600082815260016020819052604090912001546103dc816111af565b6103bb83836111b9565b6001600160a01b03811633146104565760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610385565b6104608282611224565b5050565b600082815260026020526040902080546001600160a01b031633146104dc5760405162461bcd60e51b815260206004820152602860248201527f4f6e6c7920676f616c2063726561746f722063616e2061636869657665206d696044820152676c6573746f6e657360c01b6064820152608401610385565b6007810154821061052f5760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964206d696c6573746f6e6520696e6465780000000000000000006044820152606401610385565b80600701828154811061054457610544611cfd565b90600052602060002090602091828204019190069054906101000a900460ff16156105b15760405162461bcd60e51b815260206004820152601a60248201527f4d696c6573746f6e6520616c72656164792061636869657665640000000000006044820152606401610385565b60018160070183815481106105c8576105c8611cfd565b90600052602060002090602091828204019190066101000a81548160ff021916908315150217905550827fef71bb2c18b916e2735c6d7bde267d92271147307baf10ba7a3e9b9cb3a880b48360405161062391815260200190565b60405180910390a26106348361128b565b156103bb5760088101805460ff1916600117905560405183907f64e68ade6bce7f723a972cc4e1f0eef423b70983429960ebad16879387a86bde90600090a2505050565b600260205260009081526040902080546001820180546001600160a01b0390921692916106a490611d13565b80601f01602080910402602001604051908101604052809291908181526020018280546106d090611d13565b801561071d5780601f106106f25761010080835404028352916020019161071d565b820191906000526020600020905b81548152906001019060200180831161070057829003601f168201915b50505050600283015460048401546008909401549293909260ff80831693506101009283900481169281831692041687565b600081815260026020819052604082208054918101546004820154600883015460018401805460609688968896889687968996879687968a96879690956001600160a01b03909216949092600387019260ff808216936101009283900482169360058b019360068c019360078d01938082169392900416908a906107d290611d13565b80601f01602080910402602001604051908101604052809291908181526020018280546107fe90611d13565b801561084b5780601f106108205761010080835404028352916020019161084b565b820191906000526020600020905b81548152906001019060200180831161082e57829003601f168201915b50505050509950878054806020026020016040519081016040528092919081815260200182805480156108a757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610889575b505050505097508480548060200260200160405190810160405280929190818152602001828054801561091957602002820191906000526020600020906000905b825461010083900a900460ff1615158152602060019283018181049485019490930390920291018084116108e85790505b5050505050945083805480602002602001604051908101604052809291908181526020016000905b828210156109ed57838290600052602060002001805461096090611d13565b80601f016020809104026020016040519081016040528092919081815260200182805461098c90611d13565b80156109d95780601f106109ae576101008083540402835291602001916109d9565b820191906000526020600020905b8154815290600101906020018083116109bc57829003601f168201915b505050505081526020019060010190610941565b50505050935082805480602002602001604051908101604052809291908181526020018280548015610a5e57602002820191906000526020600020906000905b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411610a2d5790505b505050505092509b509b509b509b509b509b509b509b509b509b509b505091939597999b90929496989a50565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610abe611306565b60003411610b0e5760405162461bcd60e51b815260206004820152601c60248201527f5374616b65206d7573742062652067726561746572207468616e2030000000006044820152606401610385565b6000835111610b5f5760405162461bcd60e51b815260206004820152601e60248201527f4174206c65617374206f6e65206a7564676520697320726571756972656400006044820152606401610385565b610100835110610ba35760405162461bcd60e51b815260206004820152600f60248201526e546f6f206d616e79206a756467657360881b6044820152606401610385565b6000825111610bff5760405162461bcd60e51b815260206004820152602260248201527f4174206c65617374206f6e65206d696c6573746f6e6520697320726571756972604482015261195960f21b6064820152608401610385565b60008160ff16118015610c16575082518160ff1611155b610c6e5760405162461bcd60e51b8152602060048201526024808201527f496e76616c6964206e756d626572206f6620726571756972656420617070726f60448201526376616c7360e01b6064820152608401610385565b33600090815260036020526040812080549082610c8a83611d63565b90915550600081815260026020526040902080546001600160a01b0319163317815590915060018101610cbd8782611dca565b503460028201558451610cd9906003830190602088019061172f565b5060048101805460ff191660ff851617905560005b8551811015610d8c5760058201805460018101825560009182526020918290209181049091018054601f9092166101000a60ff021990911690558551869082908110610d3c57610d3c611cfd565b60200260200101516001600160a01b0316837f3c27c02eb6e2b17241e7ca6fa7a59a27d61c2713a28f5652148bc1fbb65a595f60405160405180910390a380610d8481611d63565b915050610cee565b5060005b8451811015610e745781600601858281518110610daf57610daf611cfd565b60209081029190910181015182546001810184556000938452919092200190610dd89082611dca565b5060078201805460018101825560009182526020918290209181049091018054601f9092166101000a60ff02199091169055845183907fe67e4500ba1c5a33e0bb3c97b84e34eb7f637c3da038f433e1d77ba82e221dac908390889082908110610e4457610e44611cfd565b6020026020010151604051610e5a929190611e8a565b60405180910390a280610e6c81611d63565b915050610d90565b50336001600160a01b0316827ffd43d0275d4eca5919abed0968d926f051b32d154186098c880850d57428c2e08834604051610eb1929190611eab565b60405180910390a360405160ff8416815282907fe3b214cc854ca896592f75cf23b5cf6c678b407bc460430cc6f1ea93061a9fe49060200160405180910390a25050610efd6001600055565b50505050565b610f0b611306565b600081815260026020526040812090610f24833361135f565b90506101008110610f695760405162461bcd60e51b815260206004820152600f60248201526e129d5919d9481b9bdd08199bdd5b99608a1b6044820152606401610385565b600882015460ff16610fd55760405162461bcd60e51b815260206004820152602f60248201527f416c6c206d696c6573746f6e6573206d7573742062652061636869657665642060448201526e1899599bdc9948185c1c1c9bdd985b608a1b6064820152608401610385565b6008820154610100900460ff16156110285760405162461bcd60e51b8152602060048201526016602482015275119d5b991cc8185b1c9958591e481c995b19585cd95960521b6044820152606401610385565b81600501818154811061103d5761103d611cfd565b90600052602060002090602091828204019190069054906101000a900460ff16156110aa5760405162461bcd60e51b815260206004820152601a60248201527f4a756467652068617320616c726561647920617070726f7665640000000000006044820152606401610385565b60018260050182815481106110c1576110c1611cfd565b90600052602060002090602091828204019190066101000a81548160ff02191690831515021790555081600401600181819054906101000a900460ff168092919061110b90611ecd565b91906101000a81548160ff021916908360ff16021790555050336001600160a01b0316837f4f913434dd45d466b165ce6d739d17ab57ed310a07c4909b2034286e27d8f6c660405160405180910390a3600482015460ff808216610100909204160361117a5761117a836113db565b50506111866001600055565b50565b600082815260016020819052604090912001546111a5816111af565b6103bb8383611224565b6111868133611521565b6111c38282610a8b565b6104605760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b61122e8282610a8b565b156104605760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000818152600260205260408120815b60078201548110156112fc578160070181815481106112bc576112bc611cfd565b90600052602060002090602091828204019190069054906101000a900460ff166112ea575060009392505050565b806112f481611d63565b91505061129b565b5060019392505050565b6002600054036113585760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610385565b6002600055565b6000828152600260205260408120815b60038201548110156113cf57836001600160a01b031682600301828154811061139a5761139a611cfd565b6000918252602090912001546001600160a01b0316036113bd5791506103289050565b806113c781611d63565b91505061136f565b50610100949350505050565b6000818152600260205260409020600881015460ff166114325760405162461bcd60e51b815260206004820152601260248201527111dbd85b081b9bdd0818dbdb5c1b195d195960721b6044820152606401610385565b6008810154610100900460ff16156114855760405162461bcd60e51b8152602060048201526016602482015275119d5b991cc8185b1c9958591e481c995b19585cd95960521b6044820152606401610385565b60088101805461ff001916610100179055805460028201546040516001600160a01b039092169184917f6e3c6096795c8298a218b2cfb8bde42726ff7c9a3d27b4d3ba41ab7f74feb5fb916114dc91815260200190565b60405180910390a3805460028201546040516001600160a01b039092169181156108fc0291906000818181858888f193505050501580156103bb573d6000803e3d6000fd5b61152b8282610a8b565b610460576115388161157a565b61154383602061158c565b604051602001611554929190611eec565b60408051601f198184030181529082905262461bcd60e51b825261038591600401611f61565b60606103286001600160a01b03831660145b6060600061159b836002611f74565b6115a6906002611f8b565b67ffffffffffffffff8111156115be576115be611a8d565b6040519080825280601f01601f1916602001820160405280156115e8576020820181803683370190505b509050600360fc1b8160008151811061160357611603611cfd565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061163257611632611cfd565b60200101906001600160f81b031916908160001a9053506000611656846002611f74565b611661906001611f8b565b90505b60018111156116d9576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061169557611695611cfd565b1a60f81b8282815181106116ab576116ab611cfd565b60200101906001600160f81b031916908160001a90535060049490941c936116d281611f9e565b9050611664565b5083156117285760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610385565b9392505050565b828054828255906000526020600020908101928215611784579160200282015b8281111561178457825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061174f565b50611790929150611794565b5090565b5b808211156117905760008155600101611795565b6000602082840312156117bb57600080fd5b81356001600160e01b03198116811461172857600080fd5b6000602082840312156117e557600080fd5b5035919050565b80356001600160a01b038116811461180357600080fd5b919050565b60006020828403121561181a57600080fd5b611728826117ec565b6000806040838503121561183657600080fd5b82359150611846602084016117ec565b90509250929050565b6000806040838503121561186257600080fd5b50508035926020909101359150565b60005b8381101561188c578181015183820152602001611874565b50506000910152565b600081518084526118ad816020860160208601611871565b601f01601f19169290920160200192915050565b6001600160a01b038816815260e0602082018190526000906118e590830189611895565b60408301979097525060ff9485166060820152929093166080830152151560a082015290151560c09091015292915050565b600081518084526020808501945080840160005b8381101561194957815115158752958201959082019060010161192b565b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b8581101561199c57828403895261198a848351611895565b98850198935090840190600101611972565b5091979650505050505050565b6001600160a01b038c81168252610160602083018190526000916119cf8483018f611895565b604085018e905284810360608601528c518082526020808f0194509091019060005b81811015611a1157845184168352602094850194909201916001016119f1565b505060ff8c16608086015260ff8b1660a086015284810360c0860152611a37818b611917565b9250505082810360e0840152611a4d8188611954565b9050828103610100840152611a628187611917565b915050611a7461012083018515159052565b8215156101408301529c9b505050505050505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611acc57611acc611a8d565b604052919050565b600082601f830112611ae557600080fd5b813567ffffffffffffffff811115611aff57611aff611a8d565b611b12601f8201601f1916602001611aa3565b818152846020838601011115611b2757600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff821115611b5e57611b5e611a8d565b5060051b60200190565b600082601f830112611b7957600080fd5b81356020611b8e611b8983611b44565b611aa3565b82815260059290921b84018101918181019086841115611bad57600080fd5b8286015b84811015611bed57803567ffffffffffffffff811115611bd15760008081fd5b611bdf8986838b0101611ad4565b845250918301918301611bb1565b509695505050505050565b803560ff8116811461180357600080fd5b60008060008060808587031215611c1f57600080fd5b843567ffffffffffffffff80821115611c3757600080fd5b611c4388838901611ad4565b9550602091508187013581811115611c5a57600080fd5b8701601f81018913611c6b57600080fd5b8035611c79611b8982611b44565b81815260059190911b8201840190848101908b831115611c9857600080fd5b928501925b82841015611cbd57611cae846117ec565b82529285019290850190611c9d565b97505050506040870135915080821115611cd657600080fd5b50611ce387828801611b68565b925050611cf260608601611bf8565b905092959194509250565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680611d2757607f821691505b602082108103611d4757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060018201611d7557611d75611d4d565b5060010190565b601f8211156103bb57600081815260208120601f850160051c81016020861015611da35750805b601f850160051c820191505b81811015611dc257828155600101611daf565b505050505050565b815167ffffffffffffffff811115611de457611de4611a8d565b611df881611df28454611d13565b84611d7c565b602080601f831160018114611e2d5760008415611e155750858301515b600019600386901b1c1916600185901b178555611dc2565b600085815260208120601f198616915b82811015611e5c57888601518255948401946001909101908401611e3d565b5085821015611e7a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b828152604060208201526000611ea36040830184611895565b949350505050565b604081526000611ebe6040830185611895565b90508260208301529392505050565b600060ff821660ff8103611ee357611ee3611d4d565b60010192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611f24816017850160208801611871565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611f55816028840160208801611871565b01602801949350505050565b6020815260006117286020830184611895565b808202811582820484141761032857610328611d4d565b8082018082111561032857610328611d4d565b600081611fad57611fad611d4d565b50600019019056fea26469706673582212200819b9857629ff885295bc23efc885cd6b2308503939bebda758422b7b41f11564736f6c63430008110033",
  "devdoc": {
    "details": "A decentralized accountability contract for setting and achieving personal goals with milestones",
    "kind": "dev",
    "methods": {
      "createGoal(string,address[],string[],uint8)": {
        "details": "Creates a new goal with the specified description, judges, and milestones.",
        "params": {
          "_description": "The description of the goal.",
          "_judges": "The addresses of the judges.",
          "_milestoneDescriptions": "The descriptions of the milestones.",
          "_requiredApprovals": "The number of approvals required."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "Akuntabel",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 399,
        "contract": "contracts/Akuntabel.sol:Akuntabel",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 24,
        "contract": "contracts/Akuntabel.sol:Akuntabel",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 1581,
        "contract": "contracts/Akuntabel.sol:Akuntabel",
        "label": "goals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Goal)1576_storage)"
      },
      {
        "astId": 1585,
        "contract": "contracts/Akuntabel.sol:Akuntabel",
        "label": "goalNonce",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bool)dyn_storage": {
        "base": "t_bool",
        "encoding": "dynamic_array",
        "label": "bool[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_struct(Goal)1576_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Akuntabel.Goal)",
        "numberOfBytes": "32",
        "value": "t_struct(Goal)1576_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Goal)1576_storage": {
        "encoding": "inplace",
        "label": "struct Akuntabel.Goal",
        "members": [
          {
            "astId": 1551,
            "contract": "contracts/Akuntabel.sol:Akuntabel",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1553,
            "contract": "contracts/Akuntabel.sol:Akuntabel",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1555,
            "contract": "contracts/Akuntabel.sol:Akuntabel",
            "label": "stake",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1558,
            "contract": "contracts/Akuntabel.sol:Akuntabel",
            "label": "judges",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 1560,
            "contract": "contracts/Akuntabel.sol:Akuntabel",
            "label": "requiredApprovals",
            "offset": 0,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 1562,
            "contract": "contracts/Akuntabel.sol:Akuntabel",
            "label": "currentApprovals",
            "offset": 1,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 1565,
            "contract": "contracts/Akuntabel.sol:Akuntabel",
            "label": "verifiedApprovals",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_bool)dyn_storage"
          },
          {
            "astId": 1568,
            "contract": "contracts/Akuntabel.sol:Akuntabel",
            "label": "milestoneDescriptions",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 1571,
            "contract": "contracts/Akuntabel.sol:Akuntabel",
            "label": "milestoneAchieved",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_bool)dyn_storage"
          },
          {
            "astId": 1573,
            "contract": "contracts/Akuntabel.sol:Akuntabel",
            "label": "completed",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 1575,
            "contract": "contracts/Akuntabel.sol:Akuntabel",
            "label": "fundsReleased",
            "offset": 1,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/Akuntabel.sol:Akuntabel",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/Akuntabel.sol:Akuntabel",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}